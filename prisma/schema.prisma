// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum TRANSACTION_TYPE {
  DEPOSIT
  WITHDRAW
  TRANSFER
}

model Pocket {
  id                      String        @id @default(cuid())
  email                   String
  name                    String
  transactions            Transaction[] @relation(name: "pocket")
  transactionsSource      Transaction[] @relation(name: "pocketSource")
  transactionsDestination Transaction[] @relation(name: "pocketDestination")
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
}

model Notes {
  id        String   @id @default(cuid())
  email     String
  title     String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id           String        @id @default(cuid())
  email        String
  name         String
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Transaction {
  id          String           @id @default(cuid())
  email       String
  date        DateTime         @default(now())
  information String           @default("")
  type        TRANSACTION_TYPE
  value       Int              @default(0)

  PocketSource   Pocket? @relation(name: "pocketSource", fields: [pocketSourceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pocketSourceId String?

  PocketDestination   Pocket? @relation(name: "pocketDestination", fields: [pocketDestinationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pocketDestinationId String?

  Pocket   Pocket @relation(name: "pocket", fields: [pocketId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  pocketId String

  Category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
